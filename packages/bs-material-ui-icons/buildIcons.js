const fse = require('fs-extra');
const path = require('path');
const glob = require('glob');
const chalk = require('chalk');

const muiIconNames = require('./iconNames');

const color = {
  SUCCESS: '#66bb6a',
  INFO: '#283593', 
  WARNING: '#fbc02d',
  ERROR: '#e53935',
};

const tag = {
  SUCCESS: chalk.hex(color.SUCCESS)('success'),
  INFO: chalk.hex(color.INFO)('info'),
  WARNING: chalk.hex(color.WARNING)('warning!'),
  ERROR: chalk.hex(color.ERROR)('error!'),
};

const error = (err) => {
  console.error(tag.ERROR + ' ' + err);
};

class BuildIcons {
  constructor() {
    this.modulePrefix = 'MUIIcons_';
    this.themes = ['', 'Outlined', 'Rounded', 'TwoTone', 'Sharp'];
  }

  async init() {
    const userConfig = await fse.pathExists('./bsmuiicons.config.js')
      ? require(path.resolve('./bsmuiicons.config'))
      : {};
  
    this.config = Object.assign({}, {
      iconNames: [],
      outputDir: './mui-icons',
    }, userConfig);
  }

  validateIconList() {
    this.config.iconNames.forEach((iconName) => {
      if (!muiIconNames.includes(iconName)) 
        throw iconName + ' is not a material icons';
    });
  }

  async cleanMuiIcons() {
    console.time('Remove bs-material-ui icons');
    console.log(tag.INFO + ' Starting remove bs-material-ui icons');
    let pattern = path.join(this.config.outputDir, 'MUIIcons*.re');
    let files = glob.sync(pattern);
    let remove = files.map(async (iconPath) => {
      try {
        await fse.remove(iconPath);
        console.log(tag.SUCCESS + ' removed ' + path.basename(iconPath));
      } catch (err) {
        error(err);
      }
    });
    await Promise.all(remove);
    console.timeEnd('Remove bs-material-ui icons');
  }
  
  async buildMuiIcon(iconName, contents) {
    try {
      let basename =  this.modulePrefix + iconName + '.re';
      let output = path.join(this.config.outputDir, basename);
      await fse.outputFile(output, contents);
    } catch (err) {
      error(err);
    }
  }
  
  async buildMuiIcons() {
    console.time('Build bs-material-ui icons');
    console.log(tag.INFO + ' Starting build bs-material-ui icons');
    let fullNames = [];
    let parentContents = '';
    let baseIconPath = path.join(__dirname, 'BaseIcon.re');
    let baseIconContents = await fse.readFileSync(baseIconPath, 'utf-8');
    this.config.iconNames.forEach((iconName) => {
      this.themes.forEach((theme) => {
        let fullName = iconName + theme;
        fullNames.push(fullName);
        parentContents += 'module ' + fullName + ' = ' + this.modulePrefix + fullName + ';\n';
      });
    });
    let buildIcons = fullNames.map(async (fullName) => {
      let contents = '/* This file generated by bsmuiicons */\n' + baseIconContents.replace('BaseIcon', fullName);
      await this.buildMuiIcon(fullName, contents);
      console.log(tag.SUCCESS + ' builded MUIIcons_' + fullName + '.re');
    });
    buildIcons.push(this.buildParent(parentContents));
    await Promise.all(buildIcons);
    console.timeEnd('Build bs-material-ui icons');
  }
  
  async buildParent(parentContents) {
    try {
      let contents = '/* This file generated by bsmuiicons */\n' + parentContents;
      let output = path.join(this.config.outputDir + '/MUIIcons.re');
      await fse.outputFile(output, contents);
      console.log(tag.SUCCESS + ' builded MUIIcons.re');
    } catch (err) {
      error(err);
    }
  }
  
  async cleanAndBuildMuiIcons() {
    try {
      await this.init();
      this.validateIconList();
      await this.cleanMuiIcons();
      this.buildMuiIcons();
    } catch (err) {
      error(err);
    }
  }
}

module.exports = BuildIcons;