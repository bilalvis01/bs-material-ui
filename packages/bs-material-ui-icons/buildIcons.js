const fse = require('fs-extra');
const path = require('path');

const userConfig = require(path.resolve('./bsmuiicons.config'));

let modulePrefix = 'MUIIcons_';
let config = Object.assign({}, {
  iconList: [],
  output: './mui-icons',
}, userConfig);

config.output.replace(/\/$/, '');

async function removeMuiIcons() {
  console.log('starting remove mui icons');
  let remove = config.iconList.map(async function (iconName) {
    try {
      await fse.remove(path.resolve(config.output + '/MUIIcons_' + iconName + '.re'));
      console.log('successfully remove MUIIcons_' + iconName + '.re');
    } catch (err) {
      console.error(err);
    }
  });
  await Promise.all(remove);
  await removeParent();
}

async function removeParent() {
  try {
    await fse.remove(path.resolve(config.output + '/MUIIcons.re'));
    console.log('successfully remove MUIIcons.re');
  } catch (err) {
    console.error(err);
  }
}

async function buildMuiIcon(iconName, baseContents) {
  try {
    let contents = '/* This file generated by gulp */\n' + baseContents.replace('Icon', iconName); 
    await fse.outputFile(path.resolve(config.output + '/' + modulePrefix + iconName + '.re'), contents);
  } catch (err) {
    console.error(err);
  }
}

async function buildMuiIcons() {
  await removeMuiIcons();
  console.log('starting build mui icons');
  fse.readFile(__dirname + '/Icon.re', 'utf-8', function(err, data) {
    let parentContents = '';
    config.iconList.forEach(function(iconName) {
      const muiIconNameList = require('./nameList');
      if (muiIconNameList.includes(iconName)) {
        parentContents += 'module ' + iconName + ' = ' + modulePrefix + iconName + ';\n';
        buildMuiIcon(iconName, data);
      }
    });
    buildParent(parentContents);
  });
}

async function buildParent(parentContents) {
  try {
    let contents = '/* This file generated by gulp */\n' + parentContents;
    await fse.outputFile(path.resolve(config.output + '/MUIIcons.re'), contents);
  } catch (err) {
    console.error(err);
  }
}

module.exports = buildMuiIcons;