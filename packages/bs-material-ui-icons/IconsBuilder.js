const fse = require('fs-extra');
const path = require('path');
const glob = require('glob');
const chalk = require('chalk');

const materialIconList = require('./materialIconList');

const color = {
  success: '#66bb6a',
  info: '#283593', 
  warning: '#fbc02d',
  error: '#e53935',
};

const tag = {
  success: chalk.hex(color.success)('success'),
  info: chalk.hex(color.info)('info'),
  warning: chalk.hex(color.warning)('warning!'),
  error: chalk.hex(color.error)('error!'),
};

const error = (err) => {
  console.error(tag.error + ' ' + err);
};

class IconsBuilder {
  constructor() {
    this.modulePrefix = 'MUIIcons_';
    this.themes = ['', 'Outlined', 'Rounded', 'TwoTone', 'Sharp'];
    this.configKeys = ['icons', 'outputDir'];
  }

  async initConfig() {
    const userConfig = await fse.pathExists('./bsmuiicons.config.js')
      ? require(path.resolve('./bsmuiicons.config'))
      : {};
  
    this.config = Object.assign({}, {
      icons: 'all',
      outputDir: './mui-icons',
    }, userConfig);
  }

  validateIconList() {
    let err;
    let icons = this.config.icons;

    if (Array.isArray(icons)) {
      icons.forEach((icon) => {
        if (!materialIconList.includes(icon)) {
          err = icon + ' is not a material icons'
        };
      });
    } else if (icons !== 'all') {
      err = "accepted value of icons: 'all' | array(materialIcons)";
    }

    if (err) {
      throw err;
    }
  }

  validateConfigKeys() {
    let configKeys = Object.keys(this.config);
    let validConfigKeys = this.configKeys;
    let err;

    configKeys.forEach(key => {
      if (!validConfigKeys.includes(key)) {
        err = key + ' is not a valid config field';
      }
    })

    if (err) {
      throw err;
    }
  }

  validateConfigObject() {
    this.validateConfigKeys();
    this.validateIconList();
  }

  async cleanIcons() {
    console.time('Remove bs-material-ui icons');
    console.log(tag.info + ' Starting remove bs-material-ui icons');
    let pattern = path.join(this.config.outputDir, 'MUIIcons*.re');
    let files = glob.sync(pattern);
    let cleanIcons = files.map(async (iconPath) => {
      let basename = path.basename(iconPath);
      try {
        await fse.remove(iconPath);
        console.log(tag.success + ' removed ' + basename);
      } catch (err) {
        error('cannot remove ' + basename);
      }
    });
    await Promise.all(cleanIcons);
    console.timeEnd('Remove bs-material-ui icons');
  }
  
  async buildIcon(icon, contents) {
    let basename =  this.modulePrefix + icon + '.re';
    let output = path.join(this.config.outputDir, basename);
    try {
      await fse.outputFile(output, contents);
    } catch (err) {
      error('failed build ' + basename);
    }
  }

  async buildParent(parentContents) {
    let contents = '/* This file generated by bsmuiicons */\n' + parentContents;
    let output = path.join(this.config.outputDir + '/MUIIcons.re');
    try {
      await fse.outputFile(output, contents);
      console.log(tag.success + ' builded MUIIcons.re');
    } catch (err) {
      error('failed build MUIIcons.re');
    }
  }
  
  async buildIcons() {
    console.time('Build bs-material-ui icons');
    console.log(tag.info + ' Starting build bs-material-ui icons');
    let icons = this.config.icons === 'all' 
      ? materialIconList
      : this.config.icons;
    let fullNames = [];
    let parentContents = '';
    let baseIconPath = path.join(__dirname, 'BaseIcon.re');
    let baseIconContents = await fse.readFileSync(baseIconPath, 'utf-8');
    icons.forEach((icon) => {
      this.themes.forEach((theme) => {
        let fullName = icon + theme;
        fullNames.push(fullName);
        parentContents += 'module ' + fullName + ' = ' + this.modulePrefix + fullName + ';\n';
      });
    });
    let buildIcons = fullNames.map(async (fullName) => {
      let contents = '/* This file generated by bsmuiicons */\n' + baseIconContents.replace('BaseIcon', fullName);
      await this.buildIcon(fullName, contents);
      console.log(tag.success + ' builded MUIIcons_' + fullName + '.re');
    });
    buildIcons.push(this.buildParent(parentContents));
    await Promise.all(buildIcons);
    console.timeEnd('Build bs-material-ui icons');
  }
  
  async cleanAndBuildIcons() {
    try {
      await this.initConfig();
      this.validateConfigObject();
      await this.cleanIcons();
      this.buildIcons();
    } catch (err) {
      error(err);
    }
  }
}

module.exports = IconsBuilder;