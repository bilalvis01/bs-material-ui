[@unboxed]
type property = 
  | StyleProperty('a): property;
type t = Js.Dict.t(property);

let make: list((string, property)) => t = 
  properties => Js.Dict.fromList(properties);
let nest: (string, t) => (string, property) =
  (styleName, style) => (styleName, StyleProperty(style));
let merge: list(t) => t = 
  styles => 
  Belt.List.toArray(styles) 
    ->Belt.Array.map(style => Js.Dict.entries(style))
    ->Belt.Array.concatMany
    ->Js.Dict.fromArray;

/**
 * 
 * Unit Helper
 * 
 */
// Relative length units
let ch = value => Belt.Float.toString(value) ++ "ch";
let em = value => Belt.Float.toString(value) ++ "em";
let ex = value => Belt.Float.toString(value) ++ "ex";
let rem = value => Belt.Float.toString(value) ++ "rem";
let vh = value => Belt.Float.toString(value) ++ "vh";
let vw = value => Belt.Float.toString(value) ++ "vw";
let vmin = value => Belt.Float.toString(value) ++ "vmin";
let vmax = value => Belt.Float.toString(value) ++ "vmax";
// Absolute length units
let px = value => Belt.Int.toString(value) ++ "px";
let cm = value => Belt.Int.toString(value) ++ "cm";
let mm = value => Belt.Int.toString(value) ++ "mm";
let inch = value => Belt.Int.toString(value) ++ "in";
let pc = value => Belt.Int.toString(value) ++ "pc";
let pt = value => Belt.Int.toString(value) ++ "pt";
// Length percentage
let percent = value => Belt.Int.toString(value) ++ "%";

/**
 * 
 * PseudoClass helper
 * 
 */
let active = properties => nest("&:active", properties);
let checked = properties => nest("&:checked", properties);
let default = properties => nest("&:default", properties);
let defined = properties => nest("&:defined", properties);
let disabled = properties => nest("&:disabled", properties);
let empty = properties => nest("&:empty", properties);
let enabled = properties => nest("&:enabled", properties);
let first = properties => nest("&:first", properties);
let firstChild = properties => nest("&:first-child", properties);
let firstOfType = properties => nest("&:first-of-type", properties);
let focus = properties => nest("&:focus", properties);
let focusWithin = properties => nest("&:focus-within", properties);
let host = properties => nest("&:host", properties);
let hostFunction = (selector, properties) => nest("&:host(" ++ selector ++ ")", properties);
let hover = properties => nest("&:hover", properties);
let indeterminate = properties => nest("&:indeterminate", properties);
let inRange = properties => nest("&:in-range", properties);
let invalid = properties => nest("&:invalid", properties);
let lang = (lang, properties) => nest("&:lang(" ++ lang ++ ")", properties);
let lastChild = properties => nest("&:last-child", properties);
let lastOfType = properties => nest("&:last-of-type", properties);
let leftPseudoClass = properties => nest("&:left", properties);
let link = properties => nest("&:link", properties);
let not = (selector, properties) => nest("&:not(" ++ selector ++ ")", properties);
let nthChild = (selector, properties) => nest("&:nth-child(" ++ selector ++ ")", properties);
let nthLastChild = (selector, properties) => nest("&:nth-last-child(" ++ selector ++ ")", properties);
let nthLastOfType = (selector, properties) => nest("&:nth-last-of-type(" ++ selector ++ ")", properties);
let nthOfType = (selector, properties) => nest("&:nth-of-type(" ++ selector ++ ")", properties);
let onlyChild = properties => nest("&:only-child", properties);
let onlyOfType = properties => nest("&:only-of-type", properties);
let optional = properties => nest("&:optional", properties);
let outOfRange = properties => nest("&:out-of-range", properties);
let readOnly = properties => nest("&:read-only", properties);
let readWrite = properties => nest("&:read-write", properties);
let required = properties => nest("&:required", properties);
let rightPseudoClass = properties => nest("&:right", properties);
let root = properties => nest("&:root", properties);
let scope = properties => nest("&:scope", properties);
let target = properties => nest("&:target", properties);
let valid = properties => nest("&:valid", properties);
let visited = properties => nest("&:visited", properties);

/**
 * 
 * Pseudo element helper
 * 
 */
let after = properties => nest("&::after", properties);
let before = properties => nest("&::before", properties);
let cue = properties => nest("&::cue", properties);
let cueRegion = properties => nest("&::cue-region", properties);
let firstLetter = properties => nest("&::first-letter", properties);
let firstLine = properties => nest("&::first-line", properties);
let selection = properties => nest("&::selection", properties);
let slotted = (selector, properties) => nest("&::slotted(" ++ selector ++ ")", properties);

/**
 * 
 * Properties helper
 * 
 */
let additiveSymbols = value => ("additiveSymbols", StyleProperty(value));
let alignContent = value => ("alignContent", StyleProperty(value));
let alignItems = value => ("alignItems", StyleProperty(value));
let alignSelf = value => ("alignSelf", StyleProperty(value));
let all = value => ("all", StyleProperty(value));
let animation = value => ("animation", StyleProperty(value));
let animationDelay = value => ("animationDelay", StyleProperty(value));
let animationDirection = value => ("animationDirection", StyleProperty(value));
let animationDuration = value => ("animationDuration", StyleProperty(value));
let animationFillMode = value => ("animationFillMode", StyleProperty(value));
let animationIterationCount = value => ("animationIterationCount", StyleProperty(value));
let animationName = value => ("animationName", StyleProperty(value));
let animationPlayState = value => ("animationPlayState", StyleProperty(value));
let animationTimingFunction = value => ("animationTimingFunction", StyleProperty(value));
let backfaceVisibility = value => ("backfaceVisibility", StyleProperty(value));
let background = value => ("background", StyleProperty(value));
let backgroundAttachment = value => ("backgroundAttachment", StyleProperty(value));
let backgroundBlendMode = value => ("backgroundBlendMode", StyleProperty(value));
let backgroundClip = value => ("backgroundClip", StyleProperty(value));
let backgroundColor = value => ("backgroundColor", StyleProperty(value));
let backgroundImage = value => ("backgroundImage", StyleProperty(value));
let backgroundOrigin = value => ("backgroundOrigin", StyleProperty(value));
let backgroundPosition = value => ("backgroundPosition", StyleProperty(value));
let backgroundRepeat = value => ("backgroundRepeat", StyleProperty(value));
let backgroundSize = value => ("backgroundSize", StyleProperty(value));
let blockSize = value => ("blockSize", StyleProperty(value));
let border = value => ("border", StyleProperty(value));
let borderBlock = value => ("borderBlock", StyleProperty(value));
let borderBlockColor = value => ("borderBlockColor", StyleProperty(value));
let borderBlockEnd = value => ("borderBlockEnd", StyleProperty(value));
let borderBlockEndColor = value => ("borderBlockEndColor", StyleProperty(value));
let borderBlockEndStyleProperty = value => ("borderBlockEndStyleProperty", StyleProperty(value));
let borderBlockEndWidth = value => ("borderBlockEndWidth", StyleProperty(value));
let borderBlockStart = value => ("borderBlockStart", StyleProperty(value));
let borderBlockStartColor = value => ("borderBlockStartColor", StyleProperty(value));
let borderBlockStartStyleProperty = value => ("borderBlockStartStyleProperty", StyleProperty(value));
let borderBlockStartWidth = value => ("borderBlockStartWidth", StyleProperty(value));
let borderBlockStyleProperty = value => ("borderBlockStyleProperty", StyleProperty(value));
let borderBlockWidth = value => ("borderBlockWidth", StyleProperty(value));
let borderBottom = value => ("borderBottom", StyleProperty(value));
let borderBottomColor = value => ("borderBottomColor", StyleProperty(value));
let borderBottomLeftRadius = value => ("borderBottomLeftRadius", StyleProperty(value));
let borderBottomRightRadius = value => ("borderBottomRightRadius", StyleProperty(value));
let borderBottomStyleProperty = value => ("borderBottomStyleProperty", StyleProperty(value));
let borderBottomWidth = value => ("borderBottomWidth", StyleProperty(value));
let borderCollapse = value => ("borderCollapse", StyleProperty(value));
let borderColor = value => ("borderColor", StyleProperty(value));
let borderEndEndRadius = value => ("borderEndEndRadius", StyleProperty(value));
let borderEndStartRadius = value => ("borderEndStartRadius", StyleProperty(value));
let borderImage = value => ("borderImage", StyleProperty(value));
let borderImageOutset = value => ("borderImageOutset", StyleProperty(value));
let borderImageRepeat = value => ("borderImageRepeat", StyleProperty(value));
let borderImageSlice = value => ("borderImageSlice", StyleProperty(value));
let borderImageSource = value => ("borderImageSource", StyleProperty(value));
let borderImageWidth = value => ("borderImageWidth", StyleProperty(value));
let borderInline = value => ("borderInline", StyleProperty(value));
let borderInlineColor = value => ("borderInlineColor", StyleProperty(value));
let borderInlineEnd = value => ("borderInlineEnd", StyleProperty(value));
let borderInlineEndColor = value => ("borderInlineEndColor", StyleProperty(value));
let borderInlineEndStyleProperty = value => ("borderInlineEndStyleProperty", StyleProperty(value));
let borderInlineEndWidth = value => ("borderInlineEndWidth", StyleProperty(value));
let borderInlineStart = value => ("borderInlineStart", StyleProperty(value));
let borderInlineStartColor = value => ("borderInlineStartColor", StyleProperty(value));
let borderInlineStartStyleProperty = value => ("borderInlineStartStyleProperty", StyleProperty(value));
let borderInlineStartWidth = value => ("borderInlineStartWidth", StyleProperty(value));
let borderInlineStyleProperty = value => ("borderInlineStyleProperty", StyleProperty(value));
let borderInlineWidth = value => ("borderInlineWidth", StyleProperty(value));
let borderLeft = value => ("borderLeft", StyleProperty(value));
let borderLeftColor = value => ("borderLeftColor", StyleProperty(value));
let borderLeftStyleProperty = value => ("borderLeftStyleProperty", StyleProperty(value));
let borderLeftWidth = value => ("borderLeftWidth", StyleProperty(value));
let borderRadius = value => ("borderRadius", StyleProperty(value));
let borderRight = value => ("borderRight", StyleProperty(value));
let borderRightColor = value => ("borderRightColor", StyleProperty(value));
let borderRightStyleProperty = value => ("borderRightStyleProperty", StyleProperty(value));
let borderRightWidth = value => ("borderRightWidth", StyleProperty(value));
let borderSpacing = value => ("borderSpacing", StyleProperty(value));
let borderStartEndRadius = value => ("borderStartEndRadius", StyleProperty(value));
let borderStartStartRadius = value => ("borderStartStartRadius", StyleProperty(value));
let borderStyleProperty = value => ("borderStyleProperty", StyleProperty(value));
let borderTop = value => ("borderTop", StyleProperty(value));
let borderTopColor = value => ("borderTopColor", StyleProperty(value));
let borderTopLeftRadius = value => ("borderTopLeftRadius", StyleProperty(value));
let borderTopRightRadius = value => ("borderTopRightRadius", StyleProperty(value));
let borderTopStyleProperty = value => ("borderTopStyleProperty", StyleProperty(value));
let borderTopWidth = value => ("borderTopWidth", StyleProperty(value));
let borderWidth = value => ("borderWidth", StyleProperty(value));
let bottom = value => ("bottom", StyleProperty(value));
let boxDecorationBreak = value => ("boxDecorationBreak", StyleProperty(value));
let boxShadow = value => ("boxShadow", StyleProperty(value));
let boxSizing = value => ("boxSizing", StyleProperty(value));
let breakAfter = value => ("breakAfter", StyleProperty(value));
let breakBefore = value => ("breakBefore", StyleProperty(value));
let breakInside = value => ("breakInside", StyleProperty(value));
let captionSide = value => ("captionSide", StyleProperty(value));
let caretColor = value => ("caretColor", StyleProperty(value));
let clear = value => ("clear", StyleProperty(value));
let clip = value => ("clip", StyleProperty(value));
let clipPath = value => ("clipPath", StyleProperty(value));
let color = value => ("color", StyleProperty(value));
let colorAdjust = value => ("colorAdjust", StyleProperty(value));
let columnCount = value => ("columnCount", StyleProperty(value));
let columnFill = value => ("columnFill", StyleProperty(value));
let columnGap = value => ("columnGap", StyleProperty(value));
let columnRule = value => ("columnRule", StyleProperty(value));
let columnRuleColor = value => ("columnRuleColor", StyleProperty(value));
let columnRuleStyleProperty = value => ("columnRuleStyleProperty", StyleProperty(value));
let columnRuleWidth = value => ("columnRuleWidth", StyleProperty(value));
let columnSpan = value => ("columnSpan", StyleProperty(value));
let columnWidth = value => ("columnWidth", StyleProperty(value));
let columns = value => ("columns", StyleProperty(value));
let content = value => ("content", StyleProperty(value));
let counterIncrement = value => ("counterIncrement", StyleProperty(value));
let counterReset = value => ("counterReset", StyleProperty(value));
let counterSet = value => ("counterSet", StyleProperty(value));
let cursor = value => ("cursor", StyleProperty(value));
let direction = value => ("direction", StyleProperty(value));
let display = value => ("display", StyleProperty(value));
let emptyCells = value => ("emptyCells", StyleProperty(value));
let fallback = value => ("fallback", StyleProperty(value));
let filter = value => ("filter", StyleProperty(value));
let flex = value => ("flex", StyleProperty(value));
let flexBasis = value => ("flexBasis", StyleProperty(value));
let flexDirection = value => ("flexDirection", StyleProperty(value));
let flexFlow = value => ("flexFlow", StyleProperty(value));
let flexGrow = value => ("flexGrow", StyleProperty(value));
let flexShrink = value => ("flexShrink", StyleProperty(value));
let flexWrap = value => ("flexWrap", StyleProperty(value));
let float = value => ("float", StyleProperty(value));
let font = value => ("font", StyleProperty(value));
let fontFamily = value => ("fontFamily", StyleProperty(value));
let fontFeatureSettings = value => ("fontFeatureSettings", StyleProperty(value));
let fontKerning = value => ("fontKerning", StyleProperty(value));
let fontLanguageOverride = value => ("fontLanguageOverride", StyleProperty(value));
let fontOpticalSizing = value => ("fontOpticalSizing", StyleProperty(value));
let fontSize = value => ("fontSize", StyleProperty(value));
let fontSizeAdjust = value => ("fontSizeAdjust", StyleProperty(value));
let fontStretch = value => ("fontStretch", StyleProperty(value));
let fontStyleProperty = value => ("fontStyleProperty", StyleProperty(value));
let fontSynthesis = value => ("fontSynthesis", StyleProperty(value));
let fontVariant = value => ("fontVariant", StyleProperty(value));
let fontVariantAlternates = value => ("fontVariantAlternates", StyleProperty(value));
let fontVariantCaps = value => ("fontVariantCaps", StyleProperty(value));
let fontVariantEastAsian = value => ("fontVariantEastAsian", StyleProperty(value));
let fontVariantLigatures = value => ("fontVariantLigatures", StyleProperty(value));
let fontVariantNumeric = value => ("fontVariantNumeric", StyleProperty(value));
let fontVariantPosition = value => ("fontVariantPosition", StyleProperty(value));
let fontVariantSettings = value => ("fontVariantSettings", StyleProperty(value));
let fontWeight = value => ("fontWeight", StyleProperty(value));
let gap = value => ("gap", StyleProperty(value));
let grid = value => ("grid", StyleProperty(value));
let gridArea = value => ("gridArea", StyleProperty(value));
let gridAutoColumns = value => ("gridAutoColumns", StyleProperty(value));
let gridAutoFlow = value => ("gridAutoFlow", StyleProperty(value));
let gridAutoRows = value => ("gridAutoRows", StyleProperty(value));
let gridColumn = value => ("gridColumn", StyleProperty(value));
let gridColumnEnd = value => ("gridColumnEnd", StyleProperty(value));
let gridColumnStart = value => ("gridColumnStart", StyleProperty(value));
let gridRow = value => ("gridRow", StyleProperty(value));
let gridRowEnd = value => ("gridRowEnd", StyleProperty(value));
let gridRowStart = value => ("gridRowStart", StyleProperty(value));
let gridTemplate = value => ("gridTemplate", StyleProperty(value));
let gridTemplateAreas = value => ("gridTemplateAreas", StyleProperty(value));
let gridTemplateColumns = value => ("gridTemplateColumns", StyleProperty(value));
let gridTemplateRows = value => ("gridTemplateRows", StyleProperty(value));
let hangingPunctuation = value => ("hangingPunctuation", StyleProperty(value));
let height = value => ("height", StyleProperty(value));
let hyphens = value => ("hyphens", StyleProperty(value));
let imageOrientation = value => ("imageOrientation", StyleProperty(value));
let imageRendering = value => ("imageRendering", StyleProperty(value));
let inlineSize = value => ("inlineSize", StyleProperty(value));
let inset = value => ("inset", StyleProperty(value));
let insetBlock = value => ("insetBlock", StyleProperty(value));
let insetBlockEnd = value => ("insetBlockEnd", StyleProperty(value));
let insetBlockStart = value => ("insetBlockStart", StyleProperty(value));
let insetInline = value => ("insetInline", StyleProperty(value));
let insetInlineEnd = value => ("insetInlineEnd", StyleProperty(value));
let insetInlineStart = value => ("insetInlineStart", StyleProperty(value));
let isolation = value => ("isolation", StyleProperty(value));
let justifyContent = value => ("justifyContent", StyleProperty(value));
let justifyItems = value => ("justifyItems", StyleProperty(value));
let justifySelf = value => ("justifySelf", StyleProperty(value));
let left = value => ("left", StyleProperty(value));
let letterSpacing = value => ("letterSpacing", StyleProperty(value));
let lineBreak = value => ("lineBreak", StyleProperty(value));
let lineHeight = value => ("lineHeight", StyleProperty(value));
let listStyleProperty = value => ("listStyleProperty", StyleProperty(value));
let listStylePropertyImage = value => ("listStylePropertyImage", StyleProperty(value));
let listStylePropertyPosition = value => ("listStylePropertyPosition", StyleProperty(value));
let listStylePropertyType = value => ("listStylePropertyType", StyleProperty(value));
let margin = value => ("margin", StyleProperty(value));
let marginBlock = value => ("marginBlock", StyleProperty(value));
let marginBlockEnd = value => ("marginBlockEnd", StyleProperty(value));
let marginBlockStart = value => ("marginBlockStart", StyleProperty(value));
let marginBottom = value => ("marginBottom", StyleProperty(value));
let marginInline = value => ("marginInline", StyleProperty(value));
let marginInlineEnd = value => ("marginInlineEnd", StyleProperty(value));
let marginInlineStart = value => ("marginInlineStart", StyleProperty(value));
let marginLeft = value => ("marginLeft", StyleProperty(value));
let marginRight = value => ("marginRight", StyleProperty(value));
let marginTop = value => ("marginTop", StyleProperty(value));
let mask = value => ("mask", StyleProperty(value));
let maskClip = value => ("maskClip", StyleProperty(value));
let maskComposite = value => ("maskComposite", StyleProperty(value));
let maskImage = value => ("maskImage", StyleProperty(value));
let maskMode = value => ("maskMode", StyleProperty(value));
let maskOrigin = value => ("maskOrigin", StyleProperty(value));
let maskPosition = value => ("maskPosition", StyleProperty(value));
let maskRepeat = value => ("maskRepeat", StyleProperty(value));
let maskSize = value => ("maskSize", StyleProperty(value));
let maskType = value => ("maskType", StyleProperty(value));
let maxHeight = value => ("maxHeight", StyleProperty(value));
let maxWidth = value => ("maxWidth", StyleProperty(value));
let minBlockSize = value => ("minBlockSize", StyleProperty(value));
let minHeight = value => ("minHeight", StyleProperty(value));
let minInlineSize = value => ("minInlineSize", StyleProperty(value));
let minWidth = value => ("minWidth", StyleProperty(value));
let minZoom = value => ("minZoom", StyleProperty(value));
let mixBlendMode = value => ("mixBlendMode", StyleProperty(value));
let negative = value => ("negative", StyleProperty(value));
let objectFit = value => ("objectFit", StyleProperty(value));
let objectPosition = value => ("objectPosition", StyleProperty(value));
let opacity = value => ("opacity", StyleProperty(value));
let order = value => ("order", StyleProperty(value));
let orientation = value => ("orientation", StyleProperty(value));
let orphans = value => ("orphans", StyleProperty(value));
let outline = value => ("outline", StyleProperty(value));
let outlineColor = value => ("outlineColor", StyleProperty(value));
let outlineOffset = value => ("outlineOffset", StyleProperty(value));
let outlineStyleProperty = value => ("outlineStyleProperty", StyleProperty(value));
let outlineWidth = value => ("outlineWidth", StyleProperty(value));
let overflow = value => ("overflow", StyleProperty(value));
let overflowWrap = value => ("overflowWrap", StyleProperty(value));
let overflowX = value => ("overflowX", StyleProperty(value));
let overflowY = value => ("overflowY", StyleProperty(value));
let pad = value => ("pad", StyleProperty(value));
let padding = value => ("padding", StyleProperty(value));
let paddingBlock = value => ("paddingBlock", StyleProperty(value));
let paddingBlockEnd = value => ("paddingBlockEnd", StyleProperty(value));
let paddingBlockStart = value => ("paddingBlockStart", StyleProperty(value));
let paddingBottom = value => ("paddingBottom", StyleProperty(value));
let paddingInline = value => ("paddingInline", StyleProperty(value));
let paddingInlineEnd = value => ("paddingInlineEnd", StyleProperty(value));
let paddingInlineStart = value => ("paddingInlineStart", StyleProperty(value));
let paddingLeft = value => ("paddingLeft", StyleProperty(value));
let paddingRight = value => ("paddingRight", StyleProperty(value));
let paddingTop = value => ("paddingTop", StyleProperty(value));
let pageBreakAfter = value => ("pageBreakAfter", StyleProperty(value));
let pageBreakBefore = value => ("pageBreakBefore", StyleProperty(value));
let pageBreakInside = value => ("pageBreakInside", StyleProperty(value));
let perspective = value => ("perspective", StyleProperty(value));
let perspectiveOrigin = value => ("perspectiveOrigin", StyleProperty(value));
let placeContent = value => ("placeContent", StyleProperty(value));
let placeItems = value => ("placeItems", StyleProperty(value));
let placeSelf = value => ("placeSelf", StyleProperty(value));
let pointerEvents = value => ("pointerEvents", StyleProperty(value));
let position = value => ("position", StyleProperty(value));
let prefix = value => ("prefix", StyleProperty(value));
let quotes = value => ("quotes", StyleProperty(value));
let range = value => ("range", StyleProperty(value));
let resize = value => ("resize", StyleProperty(value));
let right = value => ("right", StyleProperty(value));
let rotate = value => ("rotate", StyleProperty(value));
let rowGap = value => ("rowGap", StyleProperty(value));
let scale = value => ("scale", StyleProperty(value));
let scrollBehavior = value => ("scrollBehavior", StyleProperty(value));
let scrollMargin = value => ("scrollMargin", StyleProperty(value));
let scrollMarginBlock = value => ("scrollMarginBlock", StyleProperty(value));
let scrollMarginBlockEnd = value => ("scrollMarginBlockEnd", StyleProperty(value));
let scrollMarginBlockStart = value => ("scrollMarginBlockStart", StyleProperty(value));
let scrollMarginBottom = value => ("scrollMarginBottom", StyleProperty(value));
let scrollMarginInline = value => ("scrollMarginInline", StyleProperty(value));
let scrollMarginInlineEnd = value => ("scrollMarginInlineEnd", StyleProperty(value));
let scrollMarginInlineStart = value => ("scrollMarginInlineStart", StyleProperty(value));
let scrollMarginLeft = value => ("scrollMarginLeft", StyleProperty(value));
let scrollMarginRight = value => ("scrollMarginRight", StyleProperty(value));
let scrollMarginTop = value => ("scrollMarginTop", StyleProperty(value));
let scrollPadding = value => ("scrollPadding", StyleProperty(value));
let scrollPaddingBlock = value => ("scrollPaddingBlock", StyleProperty(value));
let scrollPaddingBlockEnd = value => ("scrollPaddingBlockEnd", StyleProperty(value));
let scrollPaddingBlockStart = value => ("scrollPaddingBlockStart", StyleProperty(value));
let scrollPaddingBottom = value => ("scrollPaddingBottom", StyleProperty(value));
let scrollPaddingInline = value => ("scrollPaddingInline", StyleProperty(value));
let scrollPaddingInlineEnd = value => ("scrollPaddingInlineEnd", StyleProperty(value));
let scrollPaddingInlineStart = value => ("scrollPaddingInlineStart", StyleProperty(value));
let scrollPaddingLeft = value => ("scrollPaddingLeft", StyleProperty(value));
let scrollPaddingRight = value => ("scrollPaddingRight", StyleProperty(value));
let scrollPaddingTop = value => ("scrollPaddingTop", StyleProperty(value));
let scrollSnapAlign = value => ("scrollSnapAlign", StyleProperty(value));
let scrollSnapStop = value => ("scrollSnapStop", StyleProperty(value));
let scrollSnapType = value => ("scrollSnapType", StyleProperty(value));
let scrollbarColor = value => ("scrollbarColor", StyleProperty(value));
let scrollbarWidth = value => ("scrollbarWidth", StyleProperty(value));
let shapeImageThreshold = value => ("shapeImageThreshold", StyleProperty(value));
let shapeMargin = value => ("shapeMargin", StyleProperty(value));
let shapeOutside = value => ("shapeOutside", StyleProperty(value));
let speakAs = value => ("speakAs", StyleProperty(value));
let src = value => ("src", StyleProperty(value));
let suffix = value => ("suffix", StyleProperty(value));
let symbols = value => ("symbols", StyleProperty(value));
let system = value => ("system", StyleProperty(value));
let tabSize = value => ("tabSize", StyleProperty(value));
let tableLayout = value => ("tableLayout", StyleProperty(value));
let textAlign = value => ("textAlign", StyleProperty(value));
let textAlignLast = value => ("textAlignLast", StyleProperty(value));
let textCombineUpright = value => ("textCombineUpright", StyleProperty(value));
let textDecoration = value => ("textDecoration", StyleProperty(value));
let textDecorationColor = value => ("textDecorationColor", StyleProperty(value));
let textDecorationLine = value => ("textDecorationLine", StyleProperty(value));
let textDecorationStyleProperty = value => ("textDecorationStyleProperty", StyleProperty(value));
let textDecorationThickness = value => ("textDecorationThickness", StyleProperty(value));
let textEmphasis = value => ("textEmphasis", StyleProperty(value));
let textEmphasisColor = value => ("textEmphasisColor", StyleProperty(value));
let textEmphasisPosition = value => ("textEmphasisPosition", StyleProperty(value));
let textEmphasisStyleProperty = value => ("textEmphasisStyleProperty", StyleProperty(value));
let textIndent = value => ("textIndent", StyleProperty(value));
let textJustify = value => ("textJustify", StyleProperty(value));
let textOrientation = value => ("textOrientation", StyleProperty(value));
let textOverflow = value => ("textOverflow", StyleProperty(value));
let textRendering = value => ("textRendering", StyleProperty(value));
let textShadow = value => ("textShadow", StyleProperty(value));
let textTransform = value => ("textTransform", StyleProperty(value));
let textUnderlineOffset = value => ("textUnderlineOffset", StyleProperty(value));
let textUnderlinePosition = value => ("textUnderlinePosition", StyleProperty(value));
let top = value => ("top", StyleProperty(value));
let touchAction = value => ("touchAction", StyleProperty(value));
let transform = value => ("transform", StyleProperty(value));
let transformBox = value => ("transformBox", StyleProperty(value));
let transformOrigin = value => ("transformOrigin", StyleProperty(value));
let transformStyleProperty = value => ("transformStyleProperty", StyleProperty(value));
let transition = value => ("transition", StyleProperty(value));
let transitionDelay = value => ("transitionDelay", StyleProperty(value));
let transitionDuration = value => ("transitionDuration", StyleProperty(value));
let transitionProperty = value => ("transitionProperty", StyleProperty(value));
let transitionTimingFunction = value => ("transitionTimingFunction", StyleProperty(value)); 
let translate = value => ("translate", StyleProperty(value));
let unicodeBidi = value => ("unicodeBidi", StyleProperty(value));
let unicodeRange = value => ("unicodeRange", StyleProperty(value));
let userZoom = value => ("userZoom", StyleProperty(value));
let verticalAlign = value => ("verticalAlign", StyleProperty(value));
let visibility = value => ("visibility", StyleProperty(value));
let whiteSpace = value => ("whiteSpace", StyleProperty(value));
let widows = value => ("widows", StyleProperty(value));
let width = value => ("width", StyleProperty(value));
let willChange = value => ("willChange", StyleProperty(value));
let wordBreak = value => ("wordBreak", StyleProperty(value));
let wordSpacing = value => ("wordSpacing", StyleProperty(value));
let wordWrap = value => ("wordWrap", StyleProperty(value));
let writingMode = value => ("writingMode", StyleProperty(value));
let zIndex = value => ("zIndex", StyleProperty(value));
let zoom = value => ("zoom", StyleProperty(value));